class Solution {
public:
    // Custom comparator for the priority queue to sort by frequency
    struct lambda {
        bool operator()(pair<char, int>& p1, pair<char, int>& p2) {
            return p1.second < p2.second; // Compare based on frequency (second value)
        }
    };

    // Function to sort characters by frequency in descending order
    string frequencySort(string s) {
        // Step 1: Create a priority queue (max-heap) to store characters and their frequencies
        priority_queue<pair<char, int>, vector<pair<char, int>>, lambda> pq;

        // Step 2: Count the frequency of each character in the string
        unordered_map<char, int> mp;
        for (char& ch : s) {
            mp[ch]++;
        }

        // Step 3: Push the characters and their frequencies into the priority queue
        for (auto& it : mp) {
            pq.push({it.first, it.second});
        }

        // Step 4: Build the result string by extracting characters from the priority queue
        string result = "";
        while (!pq.empty()) {
            pair<char, int> temp = pq.top(); // Get the character with the highest frequency
            pq.pop();
            result += string(temp.second, temp.first); // Append the character to the result string based on its frequency
        }

        // Step 5: Return the sorted result string
        return result;
    }
};
